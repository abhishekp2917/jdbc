*   What is JDBC ?

>>  JDBC stands for "Java Database Connectivity." It is a Java-based technology that provides a standard interface for
    connecting Java applications with databases. JDBC enables Java applications to interact with various types of
    databases using a consistent and platform-independent API (Application Programming Interface).

    With JDBC, developers can write Java code to perform database operations such as querying data, updating records,
    inserting data, and more, regardless of the specific database system being used (such as MySQL, Oracle, PostgreSQL,
    etc.). This abstraction layer provided by JDBC allows developers to switch between different databases without
    having to rewrite significant portions of their code.

________________________________________________________________________________________________________________________

*   What are the basic components of JDBC ?

>>  Following are the components of JDBC :

    (1) JDBC Drivers: JDBC drivers are platform-specific implementations that bridge the gap between the Java application
        and the underlying database. It is translator that translate JAVA calls into DB specific calls and vice-versa.

        There are four types of JDBC drivers: Type 1 (JDBC-ODBC bridge), Type 2 (Native-API),
        Type 3 (Network Protocol), and Type 4 (Thin driver).

    (2) Connection: A connection is established between the Java application and the database using the JDBC driver. It
        provides methods to interact with the database, such as executing queries and updates.

    (3) Statement: A statement is an interface used to execute SQL queries against the database. It is used to send sql
        queries to DB and brng the result.

        There are two main types of statements in JDBC: 'Statement' for basic queries and 'PreparedStatement' for
        parameterized queries.

    (4) ResultSet: A ResultSet represents the result of a query. It allows you to retrieve data from the database and
        iterate over the rows returned by the query.

________________________________________________________________________________________________________________________

*   What are the steps to establish JDBC application ?

>>  Following are the steps :

    (1) Load and register driver

    (2) Establish the connection between JAVA application and database

    (3) Creation of statement object

    (4) Send and execute SQL query

    (5) Process result from result steps

    (6) Close the connection

________________________________________________________________________________________________________________________

*   What is difference between JDBC and ODBC ?

>>                  ODBC                                                    JDBC

    ODBC stands for 'Open Database Connectivity'    |   JDBC stands for 'Java Database Connectivity'
                                                    |
    We can use ODBC for any language                |   We can use JDBC for only JAVA language
                                                    |
    We can use ODBC for only windows platform       |   We can use JDBC for any platform
                                                    |
________________________________________________________________________________________________________________________

*   Explain the JDBC API packages.

>>  JDBC API contains 2 package i.e. (1) java.sql and (2) javax.sql

    'java.sql' package contains basic classes and interface which can be used for database communication.

    Following are some examples of interfaces in 'java.sql' package :

    (1) Driver
    (2) Connection
    (3) Statement
    (4) PreparedStatement
    (5) CallableStatement
    (6) ResultSet

    'javax.sql' package contains more advance classes and interface which can be used for database communication. It
    contains multiple sub packages such as 'javax.sql.rowset', 'javax.sql.rowset.serial', 'javax.sql.spi' etc

    Following are some examples of interfaces in 'javax.sql' package :

    (1) DataSource
    (2) RowSet
    (3) RowSetListener
    (4) ConnectionEventListener

________________________________________________________________________________________________________________________

*   Explain various 'execute' method in JDBC.

>>  In JDBC, the execute methods are used to execute SQL queries and statements against a database.
    These methods are available in the Statement and PreparedStatement interfaces, both of which are used to interact
    with the database. Here are some of the common execute methods along with examples:

    (1) executeQuery:

    This method is used to execute a SELECT query and retrieve the result set.

    ```
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT * FROM employees");
        while (resultSet.next()) {
            // Process each row of the result set
            String name = resultSet.getString("name");
            double salary = resultSet.getDouble("salary");
            System.out.println("Name: " + name + ", Salary: " + salary);
        }
    ```

    (2) executeUpdate:

    This method is used to execute INSERT, UPDATE, DELETE, and other DML (Data Manipulation Language) statements that do
    not return a result set. It returns the number of affected rows.

    ```
        Statement statement = connection.createStatement();
        int rowsAffected = statement.executeUpdate("UPDATE employees SET salary = salary * 1.1 WHERE department = 'IT'");
        System.out.println(rowsAffected + " rows updated");
    ```

    (3) execute:

    This method is used to execute any SQL statement. It returns a boolean indicating whether the first result is a
    result set or an update count.

    ```
        Statement statement = connection.createStatement();
        boolean hasResultSet = statement.execute("INSERT INTO employees (name, salary) VALUES ('John', 50000)");
        if (!hasResultSet) {
            int rowsAffected = statement.getUpdateCount();
            System.out.println(rowsAffected + " rows inserted");
        }
        else {
            ResultSet resultSet = statement.getResultSet();
            while (resultSet.next()) {
                // Process each row of the result set
                String name = resultSet.getString("name");
                double salary = resultSet.getDouble("salary");
                System.out.println("Name: " + name + ", Salary: " + salary);
            }
        }
    ```

    (4) executeBatch:

    This method is used to execute a batch of SQL statements together. It can improve performance by reducing the number
    of round-trips to the database.

    ```
        Statement statement = connection.createStatement();
        statement.addBatch("INSERT INTO employees (name, salary) VALUES ('Alice', 60000)");
        statement.addBatch("INSERT INTO employees (name, salary) VALUES ('Bob', 55000)");
        int[] batchResults = statement.executeBatch();
        for (int result : batchResults) {
            System.out.println("Rows affected: " + result);
        }
    ```

    (5) executeLargeUpdate:

    This method is similar to executeUpdate, but it's intended for cases where the number of affected rows might be
    larger than an int.

    ```
        Statement statement = connection.createStatement();
        long rowsAffected = statement.executeLargeUpdate("DELETE FROM employees WHERE salary < 40000");
        System.out.println(rowsAffected + " rows deleted");
    ```
________________________________________________________________________________________________________________________

*   Explain what will happen if we use different execute method for running SQL query which they aren't meant for.

>>  Given below are the scenarios and their outputs :

    (1) Using 'executeQuery' for executing Non-Select query :

        In case of Type-1 driver, we will get SQLException.
        In case of Type-4 driver, the Non-Query will be executed successfully and we will get empty ResultSet. But if
        we try to use this ResultSet object, we will get SQLException.

    (2) Using 'executeUpdate' for executing Select query :

        In case of Type-1 driver, we will get SQLException.
        In case of Type-4 driver, we will get number of rows selected.

    (3) Using 'executeUpdate' for executing Non DML query :

        In case of Type-1 driver, we will get -1.
        In case of Type-4 driver, we will get 0.

________________________________________________________________________________________________________________________

*   Do we need to explicitly commit the DML changes using JDBC ?

>>  No, we don't need to explicitly commit the DML changes as JDBC will auto commit the changes.

    If we disable the auto commit, then for a particular connection for which auto commit is disabled,
    we have to commit the changes after executing the SQL query.

    ```
        // establishing a new connection
        Connection connection = DriverManager.getConnection(jdbcUrl, username, password)

        //  disabling auto commit due to which after executing any DML query using this connection,
        //  we must commit the changes else changes will not reflect in DB
        connection.setAutoCommit(false);

        String sqlQuery = "DELETE FROM student WHERE id=1";
        Statement statement = connection.createStatement()
        int rowsEffected = statement.executeUpdate(sqlQuery);

        // committing the changes so that data will be persistence
        connection.commit();

        // closing all the opened resources
        statement.close();
        connection.close();
    ```
________________________________________________________________________________________________________________________

*   What is the use of batch updates ?

>>  A batch updates is a mechanism that allows you to execute multiple SQL statements in a single batch, rather than
    executing them one at a time. This can provide performance benefits and reduce the overhead of round-trips between
    your application and the database server.

    Batch updates can significantly improve the performance of database operations, especially when you need to insert,
    update, or delete multiple rows of data. By sending multiple statements in a single batch, you reduce the overhead
    associated with each individual SQL statement execution.

    One can execute SQL Non-select query in a batch using 'executeBatch' method. It is to be noted that this method
    can execute batch of SQL query which has Non-Select queries only else it will give an exception.

    Consider below explanation that shows how batch updates improves performance



    ---------------------     Request Time          -----------------
    |                   |-------------------------->|               | Compilation Time
    |       Java        |                           |    Database   |
    |    Application    |<--------------------------|               |
    |                   |     Response Time         |               | Execution Time
    ---------------------                           -----------------


    To make a request to a DB to execute a query and to get the response includes  Request Time, Response Time,
    compilation Time and Execution Time.

    Lets say for sake of simplicity, all of this will take 1 ms each.

    Below are 4 scenarios in which we want to execute 1000 queries using different combination of Statements and Batch
    updates :

    (1) Executing all the queries using simple Statement without batch updates :

        Time required to execute 1 query = Req Time + Res Time + Compilation Time + Exec Time
                                         = 1 ms + 1 ms + 1 ms + 1 ms
                                         = 4 ms
        Time required to execute 1000 query = Time required to execute 1 query * 1000
                                            = 4000 ms

    (2) Executing all the queries using PreparedStatement without batch updates :

            Time required to execute 1 query = Req Time + Res Time + Exec Time
                                             = 1 ms + 1 ms + 1 ms
                                             = 3 ms
            Time required to execute 1000 query = Time required to execute 1 query * 1000 + Compilation Time
                                                = 3000 ms + 1 ms
                                                = 3001 ms

    (3) Executing all the queries using simple Statement with batch updates :

            Time required to execute 1000 query = Req Time + Compilation Time * 1000 + Exec Time * 1000 + Res Time
                                                = 1 ms + 1 ms * 1000 + 1 ms * 1000 + 1 ms
                                                = 2002 ms

    (4) Executing all the queries using PreparedStatement with batch updates :

            Time required to execute 1000 query = Req Time + Compilation Time + Exec Time * 1000 + Res Time
                                                = 1 ms + 1 ms + 1 ms * 1000 + 1 ms
                                                = 1003 ms

________________________________________________________________________________________________________________________

*   What is the connection pooling ?

>>  Connection pooling is the process of creating and managing a pool of database connections that can be reused by
    multiple clients (application threads or processes) instead of creating a new connection for each client request.

    Connection pooling reduces the overhead of establishing and tearing down database connections for each client
    request. Reusing existing connections is faster and more efficient.

________________________________________________________________________________________________________________________

*   What is the process of implementing connection pooling ?

>>   Following steps must be followed to implement connection pooling :

    (1) Create 'DataSource' object.

        'DataSource' is responsible to manage connections in connection pool.
        It is an Interface present in 'javax.sql' package.

    (2) Set required JDBC properties to the 'DataSource' object.

        Set the JDBC url, username, password etc to the 'DataSource' object.

    (3) Get the connection from 'DataSource' object.

________________________________________________________________________________________________________________________




